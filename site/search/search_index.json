{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"About me"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"introduction/announcements/","text":"Publishing Announcements What is an Announcement? An announcement is a piece of information having a wide impact on the product development process, regarding Tools replaced / Sundowned and Known vulnerabilities. We will publish the announcement: as Full text if the announcement does not have place in any other section. as a Summary if the announcement have place in other section. Publishing an Announcement ???+ example \"Step 1 - Updating the announcements page\" 1. **Update (Fetch/Pull)** your local Ecosystem Guidelines repository. 2. Open your local _\\Ecosystem Guidelines\\docs\\announcements_ folder. 3. Depending on the **type of announcement** (Vulnerability or Replacement/Sundowned), open the specfic folder and edit the _index.md_ file. 4. Add you announcement in the current year tab. **Note:** Use the header markdown syntax as usual. If your announcement needs a new category, leave a message [here](https://teams.microsoft.com/l/channel/19%3aU4umwdCyw4-hxJ1ESnI9AKOoCJRDCHwaHgrMtuiJsWY1%40thread.tacv2/General?groupId=311445b5-9051-4575-9344-26e2983d2425&tenantId=0399b875-c72e-4e55-9769-78c86428c684). ??? example \"Step 2 - Updating the announcements bar\" 1. Open your local _Ecosystem Guidelines\\themes\\material\\main.html_ file_. 2. Follow the instructions given as a html comment. **Active time for announcements** (announcement bar) is _1 week to 1 mounth_ (Vulnerabilities), and _2 weeks (tool replacement)_.","title":"Create Announcements"},{"location":"introduction/announcements/#publishing-announcements","text":"","title":"Publishing Announcements"},{"location":"introduction/announcements/#what-is-an-announcement","text":"An announcement is a piece of information having a wide impact on the product development process, regarding Tools replaced / Sundowned and Known vulnerabilities. We will publish the announcement: as Full text if the announcement does not have place in any other section. as a Summary if the announcement have place in other section.","title":"What is an Announcement?"},{"location":"introduction/announcements/#publishing-an-announcement","text":"???+ example \"Step 1 - Updating the announcements page\" 1. **Update (Fetch/Pull)** your local Ecosystem Guidelines repository. 2. Open your local _\\Ecosystem Guidelines\\docs\\announcements_ folder. 3. Depending on the **type of announcement** (Vulnerability or Replacement/Sundowned), open the specfic folder and edit the _index.md_ file. 4. Add you announcement in the current year tab. **Note:** Use the header markdown syntax as usual. If your announcement needs a new category, leave a message [here](https://teams.microsoft.com/l/channel/19%3aU4umwdCyw4-hxJ1ESnI9AKOoCJRDCHwaHgrMtuiJsWY1%40thread.tacv2/General?groupId=311445b5-9051-4575-9344-26e2983d2425&tenantId=0399b875-c72e-4e55-9769-78c86428c684). ??? example \"Step 2 - Updating the announcements bar\" 1. Open your local _Ecosystem Guidelines\\themes\\material\\main.html_ file_. 2. Follow the instructions given as a html comment. **Active time for announcements** (announcement bar) is _1 week to 1 mounth_ (Vulnerabilities), and _2 weeks (tool replacement)_.","title":"Publishing an Announcement"},{"location":"introduction/contact-people/","text":"Information Support In case of doubt regarding any section, here is a list of the Ecosystem Governors to raise your questions or for reviews. Focus Area Email Ecosystem Guidelines / Content javier.hernandez@ext.mercedes-benz.io General / Project Management wolfgang.hermann@mercedes-benz.io General / Project Management melanie.pillkahn@mercedes-benz.io Project Management - OneEntry ekrem.basbug@mercedes-benz.io Project Management - Information Security marcel.niefindt@mercedes-benz.io Service Management hendrik.benz@mercedes-benz.io FOSS goncalo.marques@mercedes-benz.io FOSS tiago.santos@mercedes-benz.io Application Development - JAVA Spring Boot goncalo.marques@mercedes-benz.io Application Development - JAVA Spring Boot tiago.santos@mercedes-benz.io Application Development - AEM Backend michael.hallensleben@mercedes-benz.io Application Development - Hybris Backend steffen.heinzelmann@mercedes-benz.io Application Development - Frontend TBD Application Hosting melanie.pillkahn@mercedes-benz.io CI/CD melanie.pillkahn@mercedes-benz.io Insights & Metrics - DevOps Metrics wolfgang.hermann@mercedes-benz.io Insights & Metrics - Monitoring & Alerting melanie.pillkahn@mercedes-benz.io Quality Assurance Gate luis.vicente@mercedes-benz.io Digital Content Management joao.m.silva@mercedes-benz.io API Design dennis.koch@ext.mercedes-benz.io","title":"Index"},{"location":"introduction/contact-people/#information-support","text":"In case of doubt regarding any section, here is a list of the Ecosystem Governors to raise your questions or for reviews. Focus Area Email Ecosystem Guidelines / Content javier.hernandez@ext.mercedes-benz.io General / Project Management wolfgang.hermann@mercedes-benz.io General / Project Management melanie.pillkahn@mercedes-benz.io Project Management - OneEntry ekrem.basbug@mercedes-benz.io Project Management - Information Security marcel.niefindt@mercedes-benz.io Service Management hendrik.benz@mercedes-benz.io FOSS goncalo.marques@mercedes-benz.io FOSS tiago.santos@mercedes-benz.io Application Development - JAVA Spring Boot goncalo.marques@mercedes-benz.io Application Development - JAVA Spring Boot tiago.santos@mercedes-benz.io Application Development - AEM Backend michael.hallensleben@mercedes-benz.io Application Development - Hybris Backend steffen.heinzelmann@mercedes-benz.io Application Development - Frontend TBD Application Hosting melanie.pillkahn@mercedes-benz.io CI/CD melanie.pillkahn@mercedes-benz.io Insights & Metrics - DevOps Metrics wolfgang.hermann@mercedes-benz.io Insights & Metrics - Monitoring & Alerting melanie.pillkahn@mercedes-benz.io Quality Assurance Gate luis.vicente@mercedes-benz.io Digital Content Management joao.m.silva@mercedes-benz.io API Design dennis.koch@ext.mercedes-benz.io","title":"Information Support"},{"location":"introduction/getting-started/","text":"Getting Started Collaborate with the Ecosystem Guidelines providing updates, new content or fixes to our different topics, sections and pages. Pick your adventure: ??? example \"GETTING STARTED\" ## Prerequisites 1. A [git.daimler.com](https://git.daimler.com) user account. 2. Access to the [EcoSystem Guidelines repository](https://git.daimler.com/dh-io-techdocs/ecosystem-guidelines/). 3. Github/Git & Markdown fluency. 4. Git or a Git GUI application. Note: GitHub Desktop is recommended for non-technical roles. ### Cloning the Repository === \"Technical Roles\" Clone the [Ecosystem Guidelines](https://git.daimler.com/dh-io-techdocs/ecosystem-guidelines.git). **If you can't clone the repository**, request access [here](https://teams.microsoft.com/l/channel/19%3aU4umwdCyw4-hxJ1ESnI9AKOoCJRDCHwaHgrMtuiJsWY1%40thread.tacv2/General?groupId=311445b5-9051-4575-9344-26e2983d2425&tenantId=0399b875-c72e-4e55-9769-78c86428c684). DO NOT FORK. === \"Non-Technical Roles\" 1. Go to [EcoSystem Guidelines repository](https://git.daimler.com/dh-io-techdocs/ecosystem-guidelines/). 2. Then ![Code icon](code_ic.png) **> Clone > HTTPS**: Copy. ![Clone repo option](clone_repo2.png) ### Installing the Tools 1. Download and install [Python 3](https://www.python.org/downloads/). 2. Install and upgrade PIP: ```shell pip3 install --upgrade pip ``` 3. Installing Mkdocs and Mkdocs-Material: ```shell pip install mkdocs pip install mkdocs mkdocs-material-extensions mkdocs-redirects pymdown-extensions ``` ??? success \"LET'S WRITE\" === \"Update the Content\" ## Updating Content 1. **Update** (Pull/Fetch) your local Master branch. 2. **Create a new branch** following this naming convention: `[GITUSER]-esg-[briefUpdateDescription]-patchN`. For example: _JAVHER-esg-updatingContributionGuide-patch1_. 3. **Edit** your files with a Markdown editor. 4. **Commit** leaving an informative message about you changes. 5. **Create a PR** and **publish** it. 6. In the **Projects** section of the PR window, select _Improvements & PR Management_. **You will be redirected** to the ESG online Github repository. Once there, **Select:** - A Required Reviewer to check your Pull Request. - The _Improvements & PR Management_ project. === \"Add a New Page\" ## Adding a New Page 1. Open your local `Ecosystem-guidelines\\docs\\` folder. 2. Create the new page folder structure. **Note:** Mirror the folder structure of other topics. 2. In the new folder, add a `index.md` file. 3. Add you content and save your changes. 4. Open `\\Ecosystem-guidelines\\mkdocs_sidebar.yml` file, and add the new page. 5. **Commit** your changes. 6. **Create a PR** and **publish** it. 7. In the **Projects** section of the PR window, select _Improvements & PR Management_. **You will be redirected** to the ESG online Github repository. Once there, **Select:** - A Required Reviewer to check your Pull Request. - The _Improvements & PR Management_ project. === \"Previsualize Your Work\" ## Previsualizing Your Work Previsualizing your work provides you a sense of the user`s perspective regarding information structure, findability, etc. It also helps you to spot writting bugs. 1. In your **Ecosystem Guidelines folder** open the command line: ``` mkdocs serve ``` 2. In your browser, access: `http://127.0.0.1:8000`. === \"Update the Changelog\" ## Updating the Changelog After your Pull Request has been _reviewed_ and _approved_: 1. **Address a sentence** to the Technical Writer on the [Ecosystem Guidelines Teams channel](https://teams.microsoft.com/l/channel/19%3aU4umwdCyw4-hxJ1ESnI9AKOoCJRDCHwaHgrMtuiJsWY1%40thread.tacv2/General?groupId=311445b5-9051-4575-9344-26e2983d2425&tenantId=0399b875-c72e-4e55-9769-78c86428c684) summarizing your changes. 2. Provide the PR date of approval. --------- **Now complete your PR** by picking a reviewer and a label to your PR. After any of these workflows, your PR will be reviewed and approved. ??? info \"PICKING REVIEWERS AND LABELS\" ## Selecting Reviewers **Reviewers** help collaborators to guarantee the validity of the information provided. **Every PR** published to the Ecosystem Guidelines must have a _Requested Reviewer_. !!! info \"Info\" **Any PR** will trigger a review from the @dh-io-techdocs/ecosystem-guideline-governor team. ## Adding Labels **Labels** help to identified the nature of the change implemented by the Pull Request. These are the most useful labels to add to ESG Pull Requests: ![Labels](./ESGLabels.png) !!! help \"Help\" For any issue related to cloning the ESG repository, request access here . Further Reading Mkdocs Material Git and Github handbook . Related Pages Creating Announcements . Contanct People . Markdown Shorcuts .","title":"First Steps"},{"location":"introduction/getting-started/#getting-started","text":"Collaborate with the Ecosystem Guidelines providing updates, new content or fixes to our different topics, sections and pages. Pick your adventure: ??? example \"GETTING STARTED\" ## Prerequisites 1. A [git.daimler.com](https://git.daimler.com) user account. 2. Access to the [EcoSystem Guidelines repository](https://git.daimler.com/dh-io-techdocs/ecosystem-guidelines/). 3. Github/Git & Markdown fluency. 4. Git or a Git GUI application. Note: GitHub Desktop is recommended for non-technical roles. ### Cloning the Repository === \"Technical Roles\" Clone the [Ecosystem Guidelines](https://git.daimler.com/dh-io-techdocs/ecosystem-guidelines.git). **If you can't clone the repository**, request access [here](https://teams.microsoft.com/l/channel/19%3aU4umwdCyw4-hxJ1ESnI9AKOoCJRDCHwaHgrMtuiJsWY1%40thread.tacv2/General?groupId=311445b5-9051-4575-9344-26e2983d2425&tenantId=0399b875-c72e-4e55-9769-78c86428c684). DO NOT FORK. === \"Non-Technical Roles\" 1. Go to [EcoSystem Guidelines repository](https://git.daimler.com/dh-io-techdocs/ecosystem-guidelines/). 2. Then ![Code icon](code_ic.png) **> Clone > HTTPS**: Copy. ![Clone repo option](clone_repo2.png) ### Installing the Tools 1. Download and install [Python 3](https://www.python.org/downloads/). 2. Install and upgrade PIP: ```shell pip3 install --upgrade pip ``` 3. Installing Mkdocs and Mkdocs-Material: ```shell pip install mkdocs pip install mkdocs mkdocs-material-extensions mkdocs-redirects pymdown-extensions ``` ??? success \"LET'S WRITE\" === \"Update the Content\" ## Updating Content 1. **Update** (Pull/Fetch) your local Master branch. 2. **Create a new branch** following this naming convention: `[GITUSER]-esg-[briefUpdateDescription]-patchN`. For example: _JAVHER-esg-updatingContributionGuide-patch1_. 3. **Edit** your files with a Markdown editor. 4. **Commit** leaving an informative message about you changes. 5. **Create a PR** and **publish** it. 6. In the **Projects** section of the PR window, select _Improvements & PR Management_. **You will be redirected** to the ESG online Github repository. Once there, **Select:** - A Required Reviewer to check your Pull Request. - The _Improvements & PR Management_ project. === \"Add a New Page\" ## Adding a New Page 1. Open your local `Ecosystem-guidelines\\docs\\` folder. 2. Create the new page folder structure. **Note:** Mirror the folder structure of other topics. 2. In the new folder, add a `index.md` file. 3. Add you content and save your changes. 4. Open `\\Ecosystem-guidelines\\mkdocs_sidebar.yml` file, and add the new page. 5. **Commit** your changes. 6. **Create a PR** and **publish** it. 7. In the **Projects** section of the PR window, select _Improvements & PR Management_. **You will be redirected** to the ESG online Github repository. Once there, **Select:** - A Required Reviewer to check your Pull Request. - The _Improvements & PR Management_ project. === \"Previsualize Your Work\" ## Previsualizing Your Work Previsualizing your work provides you a sense of the user`s perspective regarding information structure, findability, etc. It also helps you to spot writting bugs. 1. In your **Ecosystem Guidelines folder** open the command line: ``` mkdocs serve ``` 2. In your browser, access: `http://127.0.0.1:8000`. === \"Update the Changelog\" ## Updating the Changelog After your Pull Request has been _reviewed_ and _approved_: 1. **Address a sentence** to the Technical Writer on the [Ecosystem Guidelines Teams channel](https://teams.microsoft.com/l/channel/19%3aU4umwdCyw4-hxJ1ESnI9AKOoCJRDCHwaHgrMtuiJsWY1%40thread.tacv2/General?groupId=311445b5-9051-4575-9344-26e2983d2425&tenantId=0399b875-c72e-4e55-9769-78c86428c684) summarizing your changes. 2. Provide the PR date of approval. --------- **Now complete your PR** by picking a reviewer and a label to your PR. After any of these workflows, your PR will be reviewed and approved. ??? info \"PICKING REVIEWERS AND LABELS\" ## Selecting Reviewers **Reviewers** help collaborators to guarantee the validity of the information provided. **Every PR** published to the Ecosystem Guidelines must have a _Requested Reviewer_. !!! info \"Info\" **Any PR** will trigger a review from the @dh-io-techdocs/ecosystem-guideline-governor team. ## Adding Labels **Labels** help to identified the nature of the change implemented by the Pull Request. These are the most useful labels to add to ESG Pull Requests: ![Labels](./ESGLabels.png) !!! help \"Help\" For any issue related to cloning the ESG repository, request access here .","title":"Getting Started"},{"location":"introduction/getting-started/#further-reading","text":"Mkdocs Material Git and Github handbook .","title":"Further Reading"},{"location":"introduction/getting-started/#related-pages","text":"Creating Announcements . Contanct People . Markdown Shorcuts .","title":"Related Pages"},{"location":"introduction/getting-started/updating-content/","text":"Getting Started !!! help \"Help\" For repository access issues, request access here . Prerequisites A git.daimler.com user account. Access to the EcoSystem Guidelines repository . Github/Git & Markdown fluency. A Git client. Updating the Content !!! warning \"Important\" * Pull/Fetch your local master branch before implementing any change. * Select a _Label_ and _Required reviewer_ for your PR. The Ecosystem Guidelines pages can be updated by: === \"Updating Existing Pages\" 1. Create a new branch. 2. Name it according to the name convention: `[GITUSER]-esg-[briefUpdateDescription]-patchN`. For example: _JAVHER-esg-updatingContributionGuide-patch1_. 3. Update the files you need. === \"Adding a New Page\" In your local _\\Ecosystem-guidelines_ folder: 1. Add the new page path in `mkdocs_sidebar.yaml`. *Note:* follow the file structure. 2. Add the new folder structure in `\\docs`. *Note:* Mirror the folder structure and file naming of other topics. === \"Updating the Changelog\" **After your Pull Request has been reviewed and approved: ** 1. Address a sentence to the Technical Writer on the [Ecosystem Guidelines Teams channel](https://teams.microsoft.com/l/channel/19%3aU4umwdCyw4-hxJ1ESnI9AKOoCJRDCHwaHgrMtuiJsWY1%40thread.tacv2/General?groupId=311445b5-9051-4575-9344-26e2983d2425&tenantId=0399b875-c72e-4e55-9769-78c86428c684) summarizing your changes. 2. Provide the PR date of approval. Then: Commit + Create a PR + Publish it . Previsualizing Your Work Previsualize your work to review your page layout and spot typos. In your Ecosystem Guidelines folder open the command line: bash make install make serve In your browser, access: http://127.0.0.1:8000 . Selecting Reviewers & Labels After publishing your PR, select a Reviewer and a Label (1 or more) in the right side of the Github page: Reviewers - Help collaborators to validate the new page updates. Labels - Help to identified the nature of the change implemented by the Pull Request. Related Pages Creating Announcements . Information Support . Markdown Shorcuts . Page Template . Writing Tips .","title":"Getting Started"},{"location":"introduction/getting-started/updating-content/#getting-started","text":"!!! help \"Help\" For repository access issues, request access here .","title":"Getting Started"},{"location":"introduction/getting-started/updating-content/#prerequisites","text":"A git.daimler.com user account. Access to the EcoSystem Guidelines repository . Github/Git & Markdown fluency. A Git client.","title":"Prerequisites"},{"location":"introduction/getting-started/updating-content/#updating-the-content","text":"!!! warning \"Important\" * Pull/Fetch your local master branch before implementing any change. * Select a _Label_ and _Required reviewer_ for your PR. The Ecosystem Guidelines pages can be updated by: === \"Updating Existing Pages\" 1. Create a new branch. 2. Name it according to the name convention: `[GITUSER]-esg-[briefUpdateDescription]-patchN`. For example: _JAVHER-esg-updatingContributionGuide-patch1_. 3. Update the files you need. === \"Adding a New Page\" In your local _\\Ecosystem-guidelines_ folder: 1. Add the new page path in `mkdocs_sidebar.yaml`. *Note:* follow the file structure. 2. Add the new folder structure in `\\docs`. *Note:* Mirror the folder structure and file naming of other topics. === \"Updating the Changelog\" **After your Pull Request has been reviewed and approved: ** 1. Address a sentence to the Technical Writer on the [Ecosystem Guidelines Teams channel](https://teams.microsoft.com/l/channel/19%3aU4umwdCyw4-hxJ1ESnI9AKOoCJRDCHwaHgrMtuiJsWY1%40thread.tacv2/General?groupId=311445b5-9051-4575-9344-26e2983d2425&tenantId=0399b875-c72e-4e55-9769-78c86428c684) summarizing your changes. 2. Provide the PR date of approval. Then: Commit + Create a PR + Publish it .","title":"Updating the Content"},{"location":"introduction/getting-started/updating-content/#previsualizing-your-work","text":"Previsualize your work to review your page layout and spot typos. In your Ecosystem Guidelines folder open the command line: bash make install make serve In your browser, access: http://127.0.0.1:8000 .","title":"Previsualizing Your Work"},{"location":"introduction/getting-started/updating-content/#selecting-reviewers-labels","text":"After publishing your PR, select a Reviewer and a Label (1 or more) in the right side of the Github page: Reviewers - Help collaborators to validate the new page updates. Labels - Help to identified the nature of the change implemented by the Pull Request.","title":"Selecting Reviewers &amp; Labels"},{"location":"introduction/getting-started/updating-content/#related-pages","text":"Creating Announcements . Information Support . Markdown Shorcuts . Page Template . Writing Tips .","title":"Related Pages"},{"location":"introduction/markdown-shortcuts/","text":"!!! info \"Last Update:\" 2/18/2022 11:46:31 AM About this Chapter Find here the basic structure of our ESG pages and the most useful markdown snippets to design your product development docs. ??? summary \"Lists\" ## Lists ### Unordered Lists === \"Outout\" - First item. - Second item. > - Subitem. > - Subitem. - Third item. === \"Markdown\" ``` - First item. - Second item: > - Subitem. > - Subitem. >> - Nested subitem. - Third item. ``` ------- ### Ordered Lists === \"Output\" 1. Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. 1. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. 2. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. 1. Mauris dictum mi lacus 2. Ut sit amet placerat ante 3. Suspendisse ac eros arcu === \"Markdown\" ``` 1. Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. 1. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. 2. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. 1. Mauris dictum mi lacus 2. Ut sit amet placerat ante 3. Suspendisse ac eros arcu ``` --------- ### Combined Lists === \"Output\" - Item 1. - Item 2: > 1. Subitem. > 2. Subitem. - Item 3. === \"Markdown\" ``` - Item 1. - Item 2: > 1. Subitem. > 2. Subitem. - Item 3. ``` ------- ??? summary \"Keyboard Keys on Page\" ## Keyboard Keys on Page === \"Output\" ++ctrl+alt+del++ === \"Markdown\" ``` ++ctrl+alt+del++ ``` ??? summary \"Task lists\" ## Task Lists === \"Output\" - [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit - [ ] Vestibulum convallis sit amet nisi a tincidunt: > - [x] In hac habitasse platea dictumst. > - [x] In scelerisque nibh non dolor mollis congue sed et metus. > - [ ] Praesent sed risus massa. - [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque === \"Markdown\" ``` - [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit - [ ] Vestibulum convallis sit amet nisi a tincidunt: > - [x] In hac habitasse platea dictumst. > - [x] In scelerisque nibh non dolor mollis congue sed et metus. > - [ ] Praesent sed risus massa. - [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque ``` ??? example \"Tables\" ## Tables === \"Output\" | | Left | Center | Right | | ------ | ----------- | ----------- | ----------- | | Uno | xxxxxxxxxxx | excepte | incididun | | Duo | senectus | xxxxxxxxxxx | ----------- | | Tribus | elementum | vestibulum | xxxxxxxxxxx | === \"Markdown\" ``` | | Left | Center | Right | | ------ | ----------- | ----------- | ----------- | | Uno | xxxxxxxxxxx | excepte | incididun | | Duo | senectus | xxxxxxxxxxx | ----------- | | Tribus | elementum | vestibulum | xxxxxxxxxxx | ``` ??? summary \"Comments\" ## Comments ``` - <!-- comment --> ``` **or** ``` - []: # (comment) ``` ??? example \"Tabs\" ## Tabs ### Tab with an Image === \"Output\" === \"Sample Tab\" ![Tincidunt id aliquet risus feugiat in ante metus dictum.](./p2.png) === \"Markdown\" ``` === \"Sample Tab\" ![Tincidunt id aliquet risus feugiat in ante metus dictum.](./p2.png) ``` --------- ### Tab with a Table === \"Output\" === \"Sample Tab\" | | Left | Center | Right | | ------ | ----------- | ----------- | ----------- | | Uno | xxxxxxxxxxx | excepte | incididun | | Duo | senectus | xxxxxxxxxxx | ----------- | | Tribus | elementum | vestibulum | xxxxxxxxxxx | === \"Markdown\" ``` === \"Sample Tab\" | | Left | Center | Right | | ------ | ----------- | ----------- | ----------- | | Uno | xxxxxxxxxxx | excepte | incididun | | Duo | senectus | xxxxxxxxxxx | ----------- | | Tribus | elementum | vestibulum | xxxxxxxxxxx | ``` -------------- ### Tab with Text === \"Output\" === \"Sample Tab\" Senectus et netus et malesuada. Massa enim nec dui nunc mattis enim. Nulla malesuada pellentesque elit eget gravida cum sociis natoque. === \"Markdown\" ``` === \"Tertio Tab\" Senectus et netus et malesuada. Massa enim nec dui nunc mattis enim. Nulla malesuada pellentesque elit eget gravida cum sociis natoque. ``` ??? summary \"Code blocks\" ## Code Blocks === \"Output\" ```yaml - Write: here your code example ``` === \"Markdown\" ``` ```yaml - Write: here your code example ``` ``` ### Highlighting Lines === \"Output\" ```php hl_lines=\"2 4\" $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); ``` === \"Markdown\" ``` ```php hl_lines=\"2 4\" $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); ``` ``` ### Naming the Code Block === \"Output\" ``` py title=\"bubble_sort.py\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` === \"Markdown\" ``` **Adding a name to the code block:** ``` py title=\"bubble_sort.py\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` ``` ??? example \"Notes\" ## Notes ### Standard Notes === \"Output\" !!! note \"Note:\" Write here the content of your note. === \"Markdown\" ``` !!! note \"Note:\" Write here the content of your note. ``` ### Semantic Notes ##### Tips === \"Output\" !!! tip \"Tips\" **Tips** provide good ideas on practices and process handling. === \"Markdown\" ``` !!! tip \"Tip\" Content. ``` ##### No Title === \"Output\" !!! tip \"\" **Note with no title**. Use this note to highlight a short piece of information using the border color as eye-chatching element. === \"Markdown\" ``` !!! tip \" \" Content. ``` ##### Information === \"Output\" !!! info \"Info\" **Info** notes provide usefull information regarding the previous paragraph. === \"Markdown\" ``` !!! info \"Info\" Content. ``` -------- ##### Summary === \"Output\" !!! summary \"Summary\" **Summary** notes a concise text about the previouys paragraphs. === \"Markdown\" ``` !!! summary \"Summary\" Content. ``` ------- ##### Success === \"Output\" !!! success \"Success\" **Success** notes show success messages or it is used to highlight positive text. === \"Markdown\" ``` !!! success \"Success\" Content. ``` ------- ##### Help === \"Output\" !!! help \"Help\" **Help** notes adds helpful information regarding the section context. === \"Markdown\" ``` !!! help \"Help\" Content. ``` --------- ##### Warning === \"Output\" !!! warning \"Warning\" **Warning** notes highlights important information to be considered. === \"Markdown\" ``` !!! warning \"Warning\" Content. ``` -------- ##### Danger === \"Output\" !!! danger \"Danger\" **Danger** notes highlights unavoidable issues that may occur when ignored. === \"Markdown\" ``` !!! danger \"Danger\" Content. ``` ----------- ##### Failure === \"Output\" !!! failure \"Failure\" **Failure** notes highlights... you know... failure. === \"Markdown\" ``` !!! failure \"Failure\" Content. ``` --------- ##### Bug === \"Output\" !!! bug \"Bug\" **Bug** notes highlights known bugs for the process previously explained. If more than 2, a FAQ-like section is highly recommended. === \"Markdown\" ``` !!! bug \"Bug\" Content. ``` --------- ##### Example === \"Output\" !!! example \"Example\" **Example** notes message goes here. === \"Markdown\" ``` !!! example \"Example\" Content. ``` ---------- ##### Quote === \"Output\" !!! quote \"Quote\" **Quote** notes message goes here. === \"Markdown\" ``` !!! quote \"Success\" Content. ``` -------- ##### Expandable Notes Use **Expandable** notes for _FAQ_ sections and to wrap content in long pages. - Expanded default (???+). - Collapsed default (???). === \"Output\" ???+ help \"Question?\" Expandable admonitions, expanded by default. **or** ??? help \"Question?\" This dynamic admonition is expanded by default. === \"Markdown\" ``` ???+ help \"Question?\" Expandable admonitions, expanded by default. ``` **or** ``` ??? help \"Question?\" This dynamic admonition is expanded by default. ``` ### Nested Notes Nesting notes add cognitive load and visual load to your page, but sometimes it cannot be bypassed so: === \"Output\" ???+ note \"Open styled details\" ??? danger \"Nested details!\" And more content again. === \"Markdown\" ``` ???+ note \"Open styled details\" ??? danger \"Nested details!\" And more content again. ``` ### Inline Notes **Inline admonitions** are also available. Add them **before writing** the surrounding content: ``` !!! tip inline \"Tip: Magna etiam tempor\" Adipiscing elit pellentesque habitant morbi. Nibh tortor id aliquet lectus proin nibh. Nulla malesuada pellentesque elit eget gravida cum sociis natoque. !!! quote inline end \"Quote: Magna etiam tempor\" Adipiscing elit pellentesque habitant morbi. Nibh tortor id aliquet lectus proin nibh. Nulla malesuada pellentesque elit eget gravida cum sociis natoque. This text is written after the admonitions. Ac tortor dignissim convallis aenean et. Vulputate odio ut enim blandit volutpat maecenas volutpat blandit aliquam. Mattis pellentesque id nibh tortor id. Faucibus nisl tincidunt eget nullam non nisi est sit amet. Pellentesque dignissim enim sit amet venenatis urna cursus eget. ``` ??? summary \"Diagrams\" ## Diagrams ### State === \"Output\" ``` mermaid stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 ``` === \"Markdown\" ``` ``` mermaid stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] ``` ``` ### Flow === \"Output\" ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` === \"Markdown\" ``` ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` ``` ### Entity-Relationship === \"Output\" ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` === \"Markdown\" ``` ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` ``` ### Class === \"Output\" ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` === \"Markdown\" ``` ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` ``` ### Sequence === \"Output\" ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` === \"Markdown\" ``` ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` ``` ### User Journey === \"Output\" ``` mermaid journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me ``` === \"Markdown\" ``` ``` mermaid journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me ``` ```","title":"Shortcuts"},{"location":"introduction/markdown-shortcuts/#about-this-chapter","text":"Find here the basic structure of our ESG pages and the most useful markdown snippets to design your product development docs. ??? summary \"Lists\" ## Lists ### Unordered Lists === \"Outout\" - First item. - Second item. > - Subitem. > - Subitem. - Third item. === \"Markdown\" ``` - First item. - Second item: > - Subitem. > - Subitem. >> - Nested subitem. - Third item. ``` ------- ### Ordered Lists === \"Output\" 1. Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. 1. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. 2. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. 1. Mauris dictum mi lacus 2. Ut sit amet placerat ante 3. Suspendisse ac eros arcu === \"Markdown\" ``` 1. Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. 1. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. 2. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. 1. Mauris dictum mi lacus 2. Ut sit amet placerat ante 3. Suspendisse ac eros arcu ``` --------- ### Combined Lists === \"Output\" - Item 1. - Item 2: > 1. Subitem. > 2. Subitem. - Item 3. === \"Markdown\" ``` - Item 1. - Item 2: > 1. Subitem. > 2. Subitem. - Item 3. ``` ------- ??? summary \"Keyboard Keys on Page\" ## Keyboard Keys on Page === \"Output\" ++ctrl+alt+del++ === \"Markdown\" ``` ++ctrl+alt+del++ ``` ??? summary \"Task lists\" ## Task Lists === \"Output\" - [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit - [ ] Vestibulum convallis sit amet nisi a tincidunt: > - [x] In hac habitasse platea dictumst. > - [x] In scelerisque nibh non dolor mollis congue sed et metus. > - [ ] Praesent sed risus massa. - [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque === \"Markdown\" ``` - [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit - [ ] Vestibulum convallis sit amet nisi a tincidunt: > - [x] In hac habitasse platea dictumst. > - [x] In scelerisque nibh non dolor mollis congue sed et metus. > - [ ] Praesent sed risus massa. - [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque ``` ??? example \"Tables\" ## Tables === \"Output\" | | Left | Center | Right | | ------ | ----------- | ----------- | ----------- | | Uno | xxxxxxxxxxx | excepte | incididun | | Duo | senectus | xxxxxxxxxxx | ----------- | | Tribus | elementum | vestibulum | xxxxxxxxxxx | === \"Markdown\" ``` | | Left | Center | Right | | ------ | ----------- | ----------- | ----------- | | Uno | xxxxxxxxxxx | excepte | incididun | | Duo | senectus | xxxxxxxxxxx | ----------- | | Tribus | elementum | vestibulum | xxxxxxxxxxx | ``` ??? summary \"Comments\" ## Comments ``` - <!-- comment --> ``` **or** ``` - []: # (comment) ``` ??? example \"Tabs\" ## Tabs ### Tab with an Image === \"Output\" === \"Sample Tab\" ![Tincidunt id aliquet risus feugiat in ante metus dictum.](./p2.png) === \"Markdown\" ``` === \"Sample Tab\" ![Tincidunt id aliquet risus feugiat in ante metus dictum.](./p2.png) ``` --------- ### Tab with a Table === \"Output\" === \"Sample Tab\" | | Left | Center | Right | | ------ | ----------- | ----------- | ----------- | | Uno | xxxxxxxxxxx | excepte | incididun | | Duo | senectus | xxxxxxxxxxx | ----------- | | Tribus | elementum | vestibulum | xxxxxxxxxxx | === \"Markdown\" ``` === \"Sample Tab\" | | Left | Center | Right | | ------ | ----------- | ----------- | ----------- | | Uno | xxxxxxxxxxx | excepte | incididun | | Duo | senectus | xxxxxxxxxxx | ----------- | | Tribus | elementum | vestibulum | xxxxxxxxxxx | ``` -------------- ### Tab with Text === \"Output\" === \"Sample Tab\" Senectus et netus et malesuada. Massa enim nec dui nunc mattis enim. Nulla malesuada pellentesque elit eget gravida cum sociis natoque. === \"Markdown\" ``` === \"Tertio Tab\" Senectus et netus et malesuada. Massa enim nec dui nunc mattis enim. Nulla malesuada pellentesque elit eget gravida cum sociis natoque. ``` ??? summary \"Code blocks\" ## Code Blocks === \"Output\" ```yaml - Write: here your code example ``` === \"Markdown\" ``` ```yaml - Write: here your code example ``` ``` ### Highlighting Lines === \"Output\" ```php hl_lines=\"2 4\" $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); ``` === \"Markdown\" ``` ```php hl_lines=\"2 4\" $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); $a = array(\"foo\" => 0, \"bar\" => 1); ``` ``` ### Naming the Code Block === \"Output\" ``` py title=\"bubble_sort.py\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` === \"Markdown\" ``` **Adding a name to the code block:** ``` py title=\"bubble_sort.py\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` ``` ??? example \"Notes\" ## Notes ### Standard Notes === \"Output\" !!! note \"Note:\" Write here the content of your note. === \"Markdown\" ``` !!! note \"Note:\" Write here the content of your note. ``` ### Semantic Notes ##### Tips === \"Output\" !!! tip \"Tips\" **Tips** provide good ideas on practices and process handling. === \"Markdown\" ``` !!! tip \"Tip\" Content. ``` ##### No Title === \"Output\" !!! tip \"\" **Note with no title**. Use this note to highlight a short piece of information using the border color as eye-chatching element. === \"Markdown\" ``` !!! tip \" \" Content. ``` ##### Information === \"Output\" !!! info \"Info\" **Info** notes provide usefull information regarding the previous paragraph. === \"Markdown\" ``` !!! info \"Info\" Content. ``` -------- ##### Summary === \"Output\" !!! summary \"Summary\" **Summary** notes a concise text about the previouys paragraphs. === \"Markdown\" ``` !!! summary \"Summary\" Content. ``` ------- ##### Success === \"Output\" !!! success \"Success\" **Success** notes show success messages or it is used to highlight positive text. === \"Markdown\" ``` !!! success \"Success\" Content. ``` ------- ##### Help === \"Output\" !!! help \"Help\" **Help** notes adds helpful information regarding the section context. === \"Markdown\" ``` !!! help \"Help\" Content. ``` --------- ##### Warning === \"Output\" !!! warning \"Warning\" **Warning** notes highlights important information to be considered. === \"Markdown\" ``` !!! warning \"Warning\" Content. ``` -------- ##### Danger === \"Output\" !!! danger \"Danger\" **Danger** notes highlights unavoidable issues that may occur when ignored. === \"Markdown\" ``` !!! danger \"Danger\" Content. ``` ----------- ##### Failure === \"Output\" !!! failure \"Failure\" **Failure** notes highlights... you know... failure. === \"Markdown\" ``` !!! failure \"Failure\" Content. ``` --------- ##### Bug === \"Output\" !!! bug \"Bug\" **Bug** notes highlights known bugs for the process previously explained. If more than 2, a FAQ-like section is highly recommended. === \"Markdown\" ``` !!! bug \"Bug\" Content. ``` --------- ##### Example === \"Output\" !!! example \"Example\" **Example** notes message goes here. === \"Markdown\" ``` !!! example \"Example\" Content. ``` ---------- ##### Quote === \"Output\" !!! quote \"Quote\" **Quote** notes message goes here. === \"Markdown\" ``` !!! quote \"Success\" Content. ``` -------- ##### Expandable Notes Use **Expandable** notes for _FAQ_ sections and to wrap content in long pages. - Expanded default (???+). - Collapsed default (???). === \"Output\" ???+ help \"Question?\" Expandable admonitions, expanded by default. **or** ??? help \"Question?\" This dynamic admonition is expanded by default. === \"Markdown\" ``` ???+ help \"Question?\" Expandable admonitions, expanded by default. ``` **or** ``` ??? help \"Question?\" This dynamic admonition is expanded by default. ``` ### Nested Notes Nesting notes add cognitive load and visual load to your page, but sometimes it cannot be bypassed so: === \"Output\" ???+ note \"Open styled details\" ??? danger \"Nested details!\" And more content again. === \"Markdown\" ``` ???+ note \"Open styled details\" ??? danger \"Nested details!\" And more content again. ``` ### Inline Notes **Inline admonitions** are also available. Add them **before writing** the surrounding content: ``` !!! tip inline \"Tip: Magna etiam tempor\" Adipiscing elit pellentesque habitant morbi. Nibh tortor id aliquet lectus proin nibh. Nulla malesuada pellentesque elit eget gravida cum sociis natoque. !!! quote inline end \"Quote: Magna etiam tempor\" Adipiscing elit pellentesque habitant morbi. Nibh tortor id aliquet lectus proin nibh. Nulla malesuada pellentesque elit eget gravida cum sociis natoque. This text is written after the admonitions. Ac tortor dignissim convallis aenean et. Vulputate odio ut enim blandit volutpat maecenas volutpat blandit aliquam. Mattis pellentesque id nibh tortor id. Faucibus nisl tincidunt eget nullam non nisi est sit amet. Pellentesque dignissim enim sit amet venenatis urna cursus eget. ``` ??? summary \"Diagrams\" ## Diagrams ### State === \"Output\" ``` mermaid stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 ``` === \"Markdown\" ``` ``` mermaid stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] ``` ``` ### Flow === \"Output\" ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` === \"Markdown\" ``` ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` ``` ### Entity-Relationship === \"Output\" ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` === \"Markdown\" ``` ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` ``` ### Class === \"Output\" ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` === \"Markdown\" ``` ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` ``` ### Sequence === \"Output\" ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` === \"Markdown\" ``` ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` ``` ### User Journey === \"Output\" ``` mermaid journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me ``` === \"Markdown\" ``` ``` mermaid journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me ``` ```","title":"About this Chapter"},{"location":"introduction/page-template/","text":"The ESG Page Template !!! info \"Last Update:\" 8/19/2021 12:22:04 PM About this Chapter The The EGS Page Template provides a set of brief explanations and examples about all the Markdown elements you may need to create awesome pages with awesome information, and tips about how to organize your pages. Introduction The Page Template A new page must follow this page organization. Copy and paste it on your new page: # About this Chapter (First chapters only) ## Introduction Concise description of the purpose and goal of the guideline. ## Prerequisites Anything that the reader needs to be aware of upfront? \"n/a\" if none. ## Parent Section ### First SubSection ##### Second Section It is very important to write the title of the second subsection in capital letters to assure readability. Add as many an your topic requires. Remember to keep very topic for a single and autonomous section. ## External References Did you mention external references / links in your guideline? \"n/a\" if none. ## Codebase This is the guideline related to a complementary codebase? \"n/a\" (if none). ## Related Pages What else would you want the reader to check out? \"n/a\" if none).","title":"Page Template"},{"location":"introduction/page-template/#the-esg-page-template","text":"!!! info \"Last Update:\" 8/19/2021 12:22:04 PM","title":"The ESG Page Template"},{"location":"introduction/page-template/#about-this-chapter","text":"The The EGS Page Template provides a set of brief explanations and examples about all the Markdown elements you may need to create awesome pages with awesome information, and tips about how to organize your pages.","title":"About this Chapter"},{"location":"introduction/page-template/#introduction","text":"","title":"Introduction"},{"location":"introduction/page-template/#the-page-template","text":"A new page must follow this page organization. Copy and paste it on your new page: # About this Chapter (First chapters only) ## Introduction Concise description of the purpose and goal of the guideline. ## Prerequisites Anything that the reader needs to be aware of upfront? \"n/a\" if none. ## Parent Section ### First SubSection ##### Second Section It is very important to write the title of the second subsection in capital letters to assure readability. Add as many an your topic requires. Remember to keep very topic for a single and autonomous section. ## External References Did you mention external references / links in your guideline? \"n/a\" if none. ## Codebase This is the guideline related to a complementary codebase? \"n/a\" (if none). ## Related Pages What else would you want the reader to check out? \"n/a\" if none).","title":"The Page Template"},{"location":"introduction/writing-tips/","text":"Technical Writing Tips Plan Your Writing Plan your writing in advance. Draft an index of the topics or ideas you need to explain. Keep It Simple Break long sections into appropriate headers: `Section (Pages) > Topics > Paragraphs. 1 Section = 1 Main topic/Idea 1 Main Topic/Idea = N subtopics. 1 Topic/Subtopic = 1 Paragraph. 1 Paragraph = 2 or 3 lines. Keep It Simple - Extended Version Avoid writing more than what it is really needed. Tech docs provide information, processes, facts to help to solve problems. Affirmative is Better Than Negative Affirmative Writing Makes Information easily Understandable. For example: ``` The job rejects Pull Requests from a forked repository ``` instead of The job will not accept a Pull Request from a forked repository. Context, Context and Context Provide enough context to accomplish the presented action or process. Think Twice Think twice or read your text twice. Ask yourself: Is it clear enough? Does the reader need context to complete the process?","title":"Writing Tips"},{"location":"introduction/writing-tips/#technical-writing-tips","text":"","title":"Technical Writing Tips"},{"location":"introduction/writing-tips/#plan-your-writing","text":"Plan your writing in advance. Draft an index of the topics or ideas you need to explain.","title":"Plan Your Writing"},{"location":"introduction/writing-tips/#keep-it-simple","text":"Break long sections into appropriate headers: `Section (Pages) > Topics > Paragraphs. 1 Section = 1 Main topic/Idea 1 Main Topic/Idea = N subtopics. 1 Topic/Subtopic = 1 Paragraph. 1 Paragraph = 2 or 3 lines.","title":"Keep It Simple"},{"location":"introduction/writing-tips/#keep-it-simple-extended-version","text":"Avoid writing more than what it is really needed. Tech docs provide information, processes, facts to help to solve problems.","title":"Keep It Simple - Extended Version"},{"location":"introduction/writing-tips/#affirmative-is-better-than-negative","text":"Affirmative Writing Makes Information easily Understandable. For example: ``` The job rejects Pull Requests from a forked repository ``` instead of The job will not accept a Pull Request from a forked repository.","title":"Affirmative is Better Than Negative"},{"location":"introduction/writing-tips/#context-context-and-context","text":"Provide enough context to accomplish the presented action or process.","title":"Context, Context and Context"},{"location":"introduction/writing-tips/#think-twice","text":"Think twice or read your text twice. Ask yourself: Is it clear enough? Does the reader need context to complete the process?","title":"Think Twice"}]}